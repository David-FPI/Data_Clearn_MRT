import streamlit as st
import pandas as pd
import re
from io import BytesIO

# ------------------------
# 1. CHU·∫®N H√ìA H·ªå T√äN
# ------------------------
def normalize_name(name):
    if pd.isna(name):
        return ""
    return " ".join(str(name).strip().title().split())

# ------------------------
# 2. CHU·∫®N H√ìA S·ªê ƒêI·ªÜN THO·∫†I
# ------------------------
def normalize_phone(phone):
    if pd.isna(phone):
        return ""
    phone = re.sub(r"[^\d]", "", str(phone))  # Lo·∫°i k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
    if phone.startswith("84"):
        phone = "0" + phone[2:]
    elif phone.startswith("+84"):
        phone = "0" + phone[3:]
    elif len(phone) == 9 and not phone.startswith("0"):
        phone = "0" + phone
    return phone if len(phone) == 10 and phone.startswith("0") else ""

# ------------------------
# 3. CHU·∫®N H√ìA EMAIL
# ------------------------
def is_valid_email(email):
    if pd.isna(email):
        return False
    email = str(email).strip().lower()
    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return re.match(pattern, email)

def normalize_email(email):
    email = str(email).strip().lower()
    return email if is_valid_email(email) else ""

# ------------------------
# 4. LO·∫†I TR√ôNG V·ªöI DATA T·ªîNG
# ------------------------
def remove_duplicates(df_new, df_total):
    phones_total = df_total['SƒêT'].astype(str).dropna().apply(normalize_phone).unique()
    emails_total = df_total['Email'].astype(str).dropna().apply(normalize_email).unique()

    def is_duplicate(row):
        phone = normalize_phone(row['Phone'])
        email = normalize_email(row['Email'])
        return (phone in phones_total) or (email and email in emails_total)

    df_filtered = df_new[~df_new.apply(is_duplicate, axis=1)].copy()
    return df_filtered

# ------------------------
# 5. CHIA ƒê·ªÄU TV - CS
# ------------------------
def assign_staff(df, tv_list, cs_list):
    tv_len = len(tv_list)
    cs_len = len(cs_list)
    df = df.reset_index(drop=True)
    df["TV"] = [tv_list[i % tv_len] for i in range(len(df))] if tv_len else ""
    df["CS"] = [cs_list[i % cs_len] for i in range(len(df))] if cs_len else ""
    return df

# ------------------------
# 6. T·∫¢I FILE D∆Ø·ªöI D·∫†NG EXCEL
# ------------------------
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Processed Data')
    processed_data = output.getvalue()
    return processed_data

# ------------------------
# 7. GIAO DI·ªÜN STREAMLIT
# ------------------------
st.set_page_config(page_title="Data MRT Processor", layout="wide")
st.title("üìä ·ª®ng d·ª•ng X·ª≠ l√Ω D·ªØ li·ªáu MRT")

st.markdown("""
### üìù H∆∞·ªõng d·∫´n:
1. **T·∫£i l√™n** file d·ªØ li·ªáu m·ªõi (`Data_MRT.xlsx`) v√† file d·ªØ li·ªáu t·ªïng (`DATA_TONG.xlsx`).
2. **Nh·∫≠p** danh s√°ch t√™n nh√¢n vi√™n TV v√† CS, c√°ch nhau b·ªüi d·∫•u ph·∫©y.
3. **Nh·∫•n n√∫t** "X·ª≠ l√Ω d·ªØ li·ªáu" ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω.
4. **T·∫£i xu·ªëng** file k·∫øt qu·∫£ sau khi x·ª≠ l√Ω.
""")

# T·∫£i l√™n file d·ªØ li·ªáu m·ªõi
uploaded_new_file = st.file_uploader("üì§ T·∫£i l√™n file d·ªØ li·ªáu m·ªõi (Data_MRT.xlsx)", type=["xlsx"], key="new_file")

# T·∫£i l√™n file d·ªØ li·ªáu t·ªïng
uploaded_total_file = st.file_uploader("üì§ T·∫£i l√™n file d·ªØ li·ªáu t·ªïng (DATA_TONG.xlsx)", type=["xlsx"], key="total_file")

# Nh·∫≠p danh s√°ch nh√¢n vi√™n TV v√† CS
tv_input = st.text_input("üë• Nh·∫≠p danh s√°ch nh√¢n vi√™n TV (c√°ch nhau b·ªüi d·∫•u ph·∫©y):", "")
cs_input = st.text_input("üë• Nh·∫≠p danh s√°ch nh√¢n vi√™n CS (c√°ch nhau b·ªüi d·∫•u ph·∫©y):", "")

# N√∫t x·ª≠ l√Ω d·ªØ li·ªáu
if st.button("üöÄ X·ª≠ l√Ω d·ªØ li·ªáu"):
    if uploaded_new_file is None:
        st.warning("Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu m·ªõi.")
    elif uploaded_total_file is None:
        st.warning("Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu t·ªïng.")
    else:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file Excel
        df_new = pd.read_excel(uploaded_new_file)
        df_total = pd.read_excel(uploaded_total_file)

        # Chu·∫©n h√≥a d·ªØ li·ªáu m·ªõi
        df_new['User'] = df_new['User'].apply(normalize_name)
        df_new['Phone'] = df_new['Phone'].apply(normalize_phone)
        df_new['Email'] = df_new['Email'].apply(normalize_email)

        # Lo·∫°i b·ªè c√°c d√≤ng tr√πng l·∫∑p
        df_filtered = remove_duplicates(df_new, df_total)

        # Ph√¢n chia nh√¢n vi√™n TV v√† CS
        tv_list = [name.strip() for name in tv_input.split(',') if name.strip()]
        cs_list = [name.strip() for name in cs_input.split(',') if name.strip()]
        df_assigned = assign_staff(df_filtered, tv_list, cs_list)

        # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(df_assigned)} d√≤ng d·ªØ li·ªáu sau khi lo·∫°i b·ªè tr√πng l·∫∑p v√† ph√¢n chia nh√¢n vi√™n.")
        st.dataframe(df_assigned)

        # T·∫£i xu·ªëng file k·∫øt qu·∫£
        processed_file = to_excel(df_assigned)
        st.download_button(
            label="üì• T·∫£i xu·ªëng file k·∫øt qu·∫£",
            data=processed_file,
            file_name="Data_MRT_Processed.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
